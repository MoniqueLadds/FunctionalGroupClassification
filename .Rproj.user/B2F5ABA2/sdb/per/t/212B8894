{
    "collab_server" : "",
    "contents" : "rm(list = ls())\n\n#run data preparation\n#source here when complete\n\nsource(\"R/data_prep.R\")\nsource(\"R/functions.R\")\n\n####PCA for mixed data types\n\nlibrary(PCAmixdata)\nlibrary(xtable)\nlibrary(cluster) #for calculating gower distance\nlibrary(dplyr)   #for cleaning data\nlibrary(Hmisc)\n\n\n\n\n\n                            ####habitat variables####\n\n    #define the data\n      PCAhabitat <- fishes[,c(\"min_depth\", \"max_depth\",\"minDepth_log\",\"maxDepth_log\",\n                              \"Temp_type\",\"Vertical_Habitat\",\"Horizontal_Habitat\")]\n    #run the model\n      pcaHabitatModel <- PCAmix(X.quanti = PCAhabitat[,3:4],\n                             X.quali =  PCAhabitat[,5:7], \n                             ndim = 3, rename.level=TRUE,\n                             graph = FALSE)\n      pcaHabitatModel$eig  #>>change to dimensions that account for >50%\n      summary(pcaHabitatModel)\n\n\n        ###export PCA results to latex\n        pcaHAB_dim <- rbind(pcaHabitatModel$eig[1:3,2],pcaHabitatModel$sqload)\n        row.names(pcaHAB_dim) <- c(\"Explained variance (%)\", \"Log of minimum depth\",\n                                   \"Log of maximum depth\", \"Temperature preference\",\n                                   \"Vertical habitat\", \"Horizontal habitat\")\n        colnames(pcaHAB_dim) <- c(\"PC 1\", \"PC 2\", \"PC 3\")\n        pcaHAB_dim <- xtable(pcaHAB_dim) \n        pcaHAB_dim <-  printbold(pcaHAB_dim, pcaHAB_dim>0.5)\n        write(pcaHAB_dim, file = \"documents/tables/HAB_PCAdimLog.tex\")\n\n    #Variables selected from analysis for clustering\n      habitatData <- fishes[, c(\"maxDepth_log\", \"Temp_type\", \"Vertical_Habitat\", \"max_depth\")]\n    \n    ###Calculate the Gower distance for habitat variables###\n      gower_dist_habitat <- daisy(habitatData[1:3],metric = \"gower\")\n      \n      summary(gower_dist_habitat)\n      gower_mat_habitat <- as.matrix(gower_dist_habitat)\n\n              #check the most similar pair\n              similar(gower_mat_habitat, habitatData)\n              #check the most dissimilar pair\n              dissimilar(gower_mat_habitat, habitatData)\n\n  ##Return the sil_width\n    sil_width_habitat <- sil_width(gower_dist_habitat)\n  #find the position with the highest sil - ie the number of groups\n    list(match(max(sil_width_habitat, na.rm = TRUE), sil_width_habitat),\n               max(sil_width_habitat, na.rm = TRUE))\n\n              ###Plot it - Change the names of the images\n              plot_silWidth(\"Habitat_silWidth\", sil_width_habitat)\n\n  ###make the final model and interpret the results. \n      final_fit_habitat <- pam(gower_dist_habitat, diss = TRUE, k = 17)\n      pam_results_habitat <- pam_results(habitatData, 1:3, final_fit_habitat)\n      \n  #print the results\n     pam_results_habitat$the_summary\n\n  ##add functional groups to original data\n    habitatData$habitat_groups <- final_fit_habitat$clustering\n\n    #summarise the key variable for each functional group\n        HAB_output <- habitatData %>% group_by(habitat_groups) %>%\n          summarise(VertHabitat = Mode(Vertical_Habitat),\n                    TempType = Mode(Temp_type),\n                    MaxDepth = mean(max_depth),\n                    MaxDepthSD = sd(max_depth),\n                    GroupSize = n())\n        colnames(HAB_output) <- c(\"Functional group\", \"Vertical habitat\",\n                                  \"Temperature preference\", \"Mean maximum depth\",\n                                  \"SD of maximum depth\", \"Number of species\")\n        \n        \n        HAB_summary<-print(xtable((HAB_output)), include.rownames=FALSE)\n        write(HAB_summary,file = \"documents/tables/habitat_summary.tex\")\n\n    ##display any of the numerical values used\n        png(\"documents/figures/Boxplot_MaxDepth.png\",height = 400, width = 600)\n        boxplot(habitatData$max_depth  ~ habitatData$habitat_groups, \n                ylab = \"Maximum depth (m)\", xlab = \"Functional group\")\n        dev.off()\n\n    #single species groups\n    habitatData[habitatData$habitat_groups == 5|habitatData$habitat_groups ==16|\n                  habitatData$habitat_groups == 17,]\n\n    \n    \n    \n    \n    \n    \n\n                            ####life history variables####\n    #Select the data\n      PCAlife <- fishes[#!fishes$RowLabels==\"WHI\",\n                        c(\"Max_weight\",\"maxLength\", \"Common_Length\",\n                            \"Phylogenetic_diversity\", \"Vulnerability\",\n                            \"maxWeight_log\", \"maxLength_log\",\n                            \"commonLength_log\", \"Reproductive_Season\",\n                            \"Reproductive_strategy\",\"Parental_care\",\n                            \"Sexual_differentation\",\"Migration\",\n                            \"Reproduction_location\",\n                            \"Shooling_type\",\"pop_double\")]\n    #Run the model\n      pcaLifeModel <- PCAmix(X.quanti = PCAlife[,4:8],\n                             X.quali =  PCAlife[9:16], \n                             ndim = 3, rename.level=TRUE,\n                             graph = FALSE)\n      pcaLifeModel$eig\n      summary(pcaLifeModel)\n\n    ###export to latex\n      pcaLIFE_dim <- rbind(pcaLifeModel$eig[1:3,2],pcaLifeModel$sqload)\n            #update names and number of PC as needed\n      rownames(pcaLIFE_dim) <- c(\"Explained variance (%)\",\"Phylogentic diversity\",\n                                  \"Vulnerability\", \"Log of maximum weight\",\n                                 \"Log of maximum length\",\"Log of common length\",\n                                 \"Reproductive season\", \"Reproductive strategy\",\n                                 \"Parental care\", \"Sexual differentation\",\n                                 \"Reproductive migration\", \"Reproduction location\",\n                                 \"Socialbility\", \"Population doubling\")\n      colnames(pcaLIFE_dim) <- c(\"PC 1\", \"PC 2\", \"PC 3\")\n      pcaLIFE_dim <-  xtable(pcaLifeModel$sqload)\n      pcaLIFE_dim <-  printbold(pcaLIFE_dim, pcaLIFE_dim>0.5)\n      write(pcaLIFE_dim, file = \"documents/tables/LIFE_PCAdimLog.tex\")\n    \n      #select data for cluster analysis\n        lifeData <- fishes[#!fishes$RowLabels==\"WHI\",\n                              c(\"Reproductive_Season\", \"Parental_care\",\n                                  \"maxLength_log\", \"Reproduction_location\",\n                                \"maxLength\")]\n        \n      ###Calculate the Gower distance for habitat variables###\n        gower_dist_life <- daisy(lifeData[1:3],metric = \"gower\")\n        summary(gower_dist_life)\n        gower_mat_life <- as.matrix(gower_dist_life)\n\n          #check the most similar pair\n          similar(gower_mat_life, lifeData)\n          #check the most dissimilar pair\n          dissimilar(gower_mat_life, lifeData)\n\n      ##Return the sil_width\n       sil_width_life <- sil_width(gower_dist_life)\n      #find the position with the highest sil - ie the number of groups\n       list(match(max(sil_width_life, na.rm = TRUE), sil_width_life),\n           max(sil_width_life, na.rm = TRUE))\n\n          ###Plot it - Change the names of the images\n          plot_silWidth(\"lifeHistory_silwidth\", sil_width_life)\n\n    ###make the final model and interpret the results. \n        final_fit_life <- pam(gower_dist_life, diss = TRUE, k = 25)\n        pam_results_life <- pam_results(lifeData, 1:3, final_fit_life)\n        \n    #print the results\n        pam_results_life$the_summary\n    \n    ##add functional groups to the original data\n      lifeData$life_groups <- final_fit_life$clustering\n\n    #summarise trait information for fucntional groups\n    LIFE_output <- lifeData %>% group_by(life_groups) %>%\n    summarise(ReproSeason = Mode(Reproductive_Season),\n              #ReproLoc = Mode(Reproduction_location),\n              ParentCare = Mode(Parental_care),\n              MaxLength = mean(maxLength),\n              MaxLengthSD = sd(maxLength),\n              GroupSize = n())\n    \n    LIFE_summary<-print(xtable((LIFE_output)), include.rownames=FALSE)\n    write(LIFE_summary,file = \"documents/tables/habitat_summary.tex\")\n    \n    \n    ##display any of the numerical values used\n      png(\"documents/figures/Boxplot_MaxLength.png\",height = 400, width = 600)\n      boxplot(lifeData$maxLength  ~ lifeData$life_groups, \n              ylab = \"Maximum length (cm)\", xlab = \"Functional group\")\n      dev.off()\n\n    \n    \n    \n    \n\n\n\n                  ####morphology variables####\n    #select the data    \n        PCAmorph <- fishes[#!fishes$CommonName==\"Sunfish\",\n                       ,c(\"Pelvic_finPosition\",\"Caudal_finShape\",\"Dorsal_Type\",\n                          \"Physical_protection\",\"Chemical_defence\",\"Barbel_presence\",\n                          \"Swimming_mode\",\"Body_form\",\"Eye_position\",\"Oral_gapePosition\",\n                          \"Max_weight\",\"maxLength\", \"Common_Length\",\n                          \"maxWeight_log\", \"maxLength_log\",\"commonLength_log\")]\n    #run the model\n       pca_moprhModel <- PCAmix(#X.quanti =  PCAmorph[,14:16], \n                             X.quali = PCAmorph[,1:10],\n                             ndim = 2,graph = FALSE,\n                             rename.level=TRUE)\n        pca_moprhModel$eig\n        summary(pca_moprhModel)\n\n\n    ##morphology variables\n      morphData <- fishes[,c(\"Caudal_finShape\",\"Oral_gapePosition\",\n                             \"Pelvic_finPosition\", \"Swimming_mode\",\n                             \"Body_form\",\"Eye_position\" )]\n\n    ###Calculate the Gower distance for morphology variables###\n      gower_dist_morph <- daisy(morphData[1:2],metric = \"gower\")\n      summary(gower_dist_morph)\n      gower_mat_morph <- as.matrix(gower_dist_morph)\n      \n          #check the most similar pair\n          similar(gower_mat_morph, morphData)\n          #check the most dissimilar pair\n          dissimilar(gower_mat_morph, morphData)\n\n    ##Return the sil_width\n      sil_width_morph <- sil_width(gower_dist_morph)\n    #find the position with the highest sil - ie the number of groups\n      list(match(max(sil_width_morph, na.rm = TRUE), sil_width_morph),\n         max(sil_width_morph, na.rm = TRUE))\n    \n      ###Plot it - Change the names of the images\n       plot_silWidth(\"morphology_silWidth\", sil_width_morph)\n\n    ###make the final model and interpret the results. \n        final_fit_morph <- pam(gower_dist_morph, diss = TRUE, k = 27)\n        pam_results_morph <- pam_results(morphData, 1:2, final_fit_morph)\n        \n    #print the results\n        pam_results_morph$the_summary\n\n    ##compare to pre-designed groups\n      morphData$morph_groups <- final_fit_morph$clustering\n      \n      MORPH_output <- morphData %>% group_by(morph_groups) %>%\n        summarise(CaudalfinShape = Mode(Caudal_finShape),\n                  OralGape = Mode(Oral_gapePosition),\n                  #SwimMode = Mode(Swimming_mode),\n                  #BodyForm = Mode(Body_form),\n                  #EyePos = Mode(Eye_position),\n                  #PelvicfinPos = Mode(Pelvic_finPosition),\n                  GroupSize = n())\n\n      MORPH_summary<-print(xtable((MORPH_output)), include.rownames=FALSE)\n      write(MORPH_summary,file = \"documents/tables/morphology_summary.tex\")\n\n###compare overlap in each of the groups\ncompareGroups <- cbind(habitatData, lifeData, morphData)\n\n(table(compareGroups$morph_groups, compareGroups$life_groups))\n\n\ncompareGroups[compareGroups$morph_groups==1,]\n\n\n\n\n\n\n###PCA analysis if groups are removed from the data\nnewPCAdata <- fishes[!fishes$group_name==\"Flatfish\"&!fishes$CommonName==\"Whitebait\",\n                     c(\"minDepth_log\",\"maxDepth_log\", \"maxWeight_log\", \n                       \"maxLength_log\", \"commonLength_log\",\n                       \"Temp_type\",\"Vertical_Habitat\",\"Horizontal_Habitat\",\n                       \"Pelvic_finPosition\",\"Caudal_finShape\",\"Dorsal_Type\",\n                       \"Physical_protection\",\"Chemical_defence\",\"Barbel_presence\",\n                       \"Swimming_mode\",\"Body_form\",\"Eye_position\",\"Oral_gapePosition\",\n                       \"Reproductive_Season\",\"Reproductive_strategy\",\n                       \"Sexual_differentation\",\"Migration\",\"Reproduction_location\",\n                       \"Shooling_type\",\"pop_double\")]\n\n#Two main groups stick out- flatfish and sunfish.\n##Remove and rerun analysis.\nnewpcaModel <- PCAmix(X.quanti = newPCAdata[,1:5], X.quali = newPCAdata[,6:25], \n                      ndim = 11, rename.level=TRUE,graph = T) \nnewpcaModel$eig\n##export the eigenvalues for all valriables\nnewpcaALL_eig <- xtable(newpcaModel$eig[1:10,1:3])\nxtable(newpcaALL_eig, type = \"latex\", digits = 3,\n       file = \"documents/ALL_PCAeig_noFlatSun.tex\")\n\n#Plot the individuals \npng(filename = \"documents/figures/All variables no flatfish or sunfish ICM.png\", width = 14, height = 10, units = \"cm\", res = 300)\npar(mar = c(3,3,1,1),mgp = c(2,1,0))\nplot(newpcaModel, main = \"All variables no flatfish or sunfish\", cex = 0.7, cex.axis = 0.7, cex.lab = 0.7, \n     cex.main = 0.8,las=1)\ndev.off()\n\n#only other option is to add weights\n#scaling does not change the results\n#logging continuous variables makes no difference\n\n\n#check eigenvalues - generally keep above 2?\npcaModel$eig[1:25,]\n#use varimax rotation\nnewpcaModelRot <- PCArot(newpcaModel, 11)\nsummary.PCAmix(pcaModelRot)\n\n#print the dimension loadings with loads over 0.5 in bold\nnewpcaALL_dim <-  printbold(xtable(newpcaModelRot$sqload), newpcaALL_dim>0.5)\nwrite(newpcaALL_dim, file = \"documents/ALL_PCAdim_noFlatSun.tex\")\n\n",
    "created" : 1495515840266.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "463584173",
    "id" : "212B8894",
    "lastKnownWriteTime" : 1491364668,
    "last_content_update" : 1491364668,
    "path" : "C:/Users/miree/OneDrive/OneDrive - Victoria University of Wellington - STAFF/TropicGroupClassification/R/PCA_forFunctionalGroups.R",
    "project_path" : "R/PCA_forFunctionalGroups.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}